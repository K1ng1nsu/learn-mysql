- Data Manipulation Language
데이터베이스의 데이터를 조회, 삽입, 수정, 삭제할 때 사용됩니다.

1. INSERT
2. SELECT
3. UPDATE
4. DELETE

---
1. INSERT
INSERT INTO <table-name> 
[(<column-name>, <column-name>)]
VALUES
(<value>, <value>)

-- 한 줄에 여러개 넣기

INSERT INTO <table-name> [(<column-name>, <column-name>)]
VALUES 
(<value>, <value>),
(<value>, <value>),
(<value>, <value>)

---
2. SELECT


SELECT [DISTINCT]  <column-name>, [...<column-name>] 
FROM <table-name>
[JOIN ~]
[WHERE  CONDITION]
[GROUP BY <column-name>]
[ HAVING CONDITION ]
[ORDER BY <column-name> [DESC, ASCE], [...<column-name>] ]
[LIMIT {[START_INDEX, NUM_OF_RECORD], [NUM_OF_RECORD]}   ]


### DISTINCT
SELECT DISTINCT author_fname, author_lname -- author_fname에만 DISTINCT가 적용되는게 아니라 풀네임에 DISTINCT가 적용됨됨
FROM books;

### WHERE 절에서 사용하는 연산자
    - LIKE -> case-insensitive 함   엄격하게 하려면  => LIKE BINARY '%d%'   => Raymond
        와일드 카드 % -> 0개 이상     David% -> David
        언더스코어  _ -> 1개의 문자   ____ -> Neil, Dave 
        와일드카드나 언더스코어 이스케이프 \     => '%\%%'
        
    - 








### GROUP BY 절

### HAVING 절





3. UPDATE

UPDATE <table-name>
SET <column-name> = 
WHERE <column-name> = 


### safe mode 에서는 TEMPORARY TABLE 을 만들어서 수행

CREATE TEMPORARY TABLE temp_cats AS
SELECT *
FROM cats
WHERE name = 'Ringo';

SELECT * FROM temp_cats;

UPDATE cats
SET breed = 'British Shorthair'
WHERE cat_id IN (SELECT cat_id FROM temp_cats);

DROP TABLE temp_cats;




4. DELETE

DELETE FROM <table-name>
WHERE <column-name> = 


### safe mode 에서는 TEMPORARY TABLE 을 만들어서 수행

CREATE TEMPORARY TABLE temp_cats AS
SELECT *
FROM cats
WHERE cat_id = age;

SELECT * FROM temp_cats;

DELETE FROM cats
WHERE cat_id IN (SELECT cat_id FROM temp_cats);

DROP table temp_cats;

SELECT * FROM cats;